[package]
#项目的名称
name = "iced"
description = "A cross-platform GUI library inspired by Elm"
#一个工作区可以有多个包(crate), 每个包都有自己的Cargo.toml文件, 其中会有一个version字段来指定包的版本, 如果没有特殊设置, 工作区的每个包都有不同的版本号
#该配置的作用是, 工作区内的所有包都共享根目录中Cargo.toml中指定的版本号, 而无需单独为每个包设置版本号. 共享的信息在[workspace.package]区域设置
#后面所有带有.workspace结尾的配置都表示要共享[workspace.package]区域的对应设置
version.workspace = true
edition.workspace = true
authors.workspace = true
license.workspace = true
repository.workspace = true
homepage.workspace = true
categories.workspace = true
keywords.workspace = true
rust-version.workspace = true

#lints是rust编译器rustc或工具链clippy用来检查代码风格,潜在错误或不推荐用法的规则
#workspace=true意味着工作区中所有包都启用和使用相同的lint设置, 具体规则设置在[workspace.lints.rust]和[workspace.lints.clippy]区域
[lints]
workspace = true

#该区域配置docs.rs文档生成的元数据, 简单来说就是定制文档的生成
#docs.rs是一个用于Rust库的在线文档托管平台, 当你发布一个Rust库到crates.io时, docs.rs会自动从该库源代码中提取文档并生成可以浏览的HTML
#文档是通过rustdoc工具生成的
[package.metadata.docs.rs]
#指定传递给rustdoc的额外参数, --cfg docsrs表示向编译器添加一个自定义的条件编译标志docsrs, 作用可能是: 某些代码仅在文档生成时有效, 在运行时不会编译
rustdoc-args = ["--cfg", "docsrs"]
#该配置表示在文档生成时启动项目的所有特性(features), Cargo会根据不同的features做出不同的行为或包括不同的依赖项. Cargo.toml文件有个features区域会定义这些功能
#默认情况下, docs.rs只会启用项目[features]区域中的default指定的特性并生成文档
all-features = true

#该区域的配置是为了给项目在crate页面(crates.io)上展示额外信息, 即标签. 通常是维护状态,构建状态,测试覆盖率等
[badges]
#该标签表示项目的维护状态, status是该标签的属性, 指定项目当前维护状态, 这里的actively-developed表示正在积极开发中
maintenance = { status = "actively-developed" }

#该区域定义项目的特性, 可以在Cargo中对它们进行自由的启用和禁用, 通常会影响可选依赖和条件编译
[features]
#default表示当没有显式指定特性时, 启用的默认特性
#wgpu: GPU加速渲染  tiny-skia: 软件渲染  fira-sans: 启用Fira Sans字体  auto-detect-theme: 自动检测主题
default = ["wgpu", "tiny-skia", "fira-sans", "auto-detect-theme"]
#定义wgpu功能所启用的具体依赖, 该功能会使iced_rederer和iced_widget包中的wgpu模块生效, 即启用GPU渲染
#iced_renderer/wgpu这种写法中, iced_renderer是一个crate名, 在当前项目的renderer目录下, 而wgpu是该crate的一个特性
wgpu = ["iced_renderer/wgpu", "iced_widget/wgpu"]
#启用tiny-skia软件渲染后端, 不依赖GPU, 而是使用CPU进行渲染, 适用于不需要高性能渲染的场景
tiny-skia = ["iced_renderer/tiny-skia"]
#启用Image部件, 该功能依赖两个子特性image-without-codecs和image/default
#image-without-codecs启用了image控件, 只提供基础图像功能, 例如显示图像, 但没有内建的图像解码器, 需要用户自己提供实现
#image/default特性启用了image crate的默认功能. 而image crate提供了图像编解码功能. image是该项目的依赖包
image = ["image-without-codecs", "image/default"]
#dep:image是一种命名依赖的写法, 指代在Cargo.toml中定义的image crate依赖
image-without-codecs = ["iced_widget/image", "dep:image"]
#支持svg格式图像显示
svg = ["iced_widget/svg"]
#支持绘制自定义组件
canvas = ["iced_widget/canvas"]
#支持生成二维码
qr_code = ["iced_widget/qr_code"]
#支持显式markdown
markdown = ["iced_widget/markdown"]
#支持延迟加载控件
lazy = ["iced_widget/lazy"]
#按F12在本地启动一个调试视图
debug = ["iced_winit/debug"]
#启用tokio作为异步执行器
tokio = ["iced_futures/tokio"]
#启用async-std作为异步执行器
async-std = ["iced_futures/async-std"]
#启用smol作为异步执行器
smol = ["iced_futures/smol"]
#启用查询系统信息的功能, 例如: 操作系统平台, 分辨率等
system = ["iced_winit/system"]
#启用 broken "sRGB linear" blending 来模拟 Web 中的颜色管理。
web-colors = ["iced_renderer/web-colors"]
#启用 WebGL 后端，替代 WebGPU 后端。使得 Iced 可以在 Web 环境中使用 WebGL 进行渲染
webgl = ["iced_renderer/webgl"]
#启用语法高亮功能
highlighter = ["iced_highlighter", "iced_widget/highlighter"]
#启用实验性的多窗口
multi-window = ["iced_winit/multi-window"]
#启用高级模块
advanced = ["iced_core/advanced", "iced_widget/advanced"]
#在 WebAssembly 构建中将 Fira Sans 字体嵌入为默认字体。
fira-sans = ["iced_renderer/fira-sans"]
#启用自动检测暗/亮模式的主题功能。
auto-detect-theme = ["iced_core/auto-detect-theme"]

#该区域用于指定依赖, xx.workspace=true的配置表示, 这些依赖是工作区的一部分, 共享依赖项, 便于统一管理
#指定依赖时可以指定启用特性
[dependencies]
iced_core.workspace = true
iced_futures.workspace = true
iced_renderer.workspace = true
iced_widget.workspace = true
#启用iced_winit的program特性
iced_winit.features = ["program"]
iced_winit.workspace = true

iced_highlighter.workspace = true
#optional表示这个依赖是可选的, 只有在需要语法高亮功能时才启用
iced_highlighter.optional = true

thiserror.workspace = true

image.workspace = true
image.optional = true

[dev-dependencies]
criterion = "0.5"
iced_wgpu.workspace = true

[[bench]]
name = "wgpu"
harness = false
required-features = ["canvas"]

[profile.release-opt]
inherits = "release"
codegen-units = 1
debug = false
lto = true
incremental = false
opt-level = 3
overflow-checks = false
strip = "debuginfo"

#工作区: 允许在一个项目中管理多个包(crate)
[workspace]
members = [
    "core",
    "futures",
    "graphics",
    "highlighter",
    "renderer",
    "runtime",
    "tiny_skia",
    "wgpu",
    "widget",
    "winit",
    "examples/*", #通配符, 匹配example下的所有子目录, 将其视为工作区成员
]

#定义所有包的共享信息
[workspace.package]
version = "0.13.5"
authors = ["Héctor Ramón Jiménez <hector@hecrj.dev>"]
edition = "2021"
license = "MIT"
repository = "https://github.com/iced-rs/iced"
homepage = "https://iced.rs"
categories = ["gui"]
keywords = ["gui", "ui", "graphics", "interface", "widgets"]
rust-version = "1.80"

[workspace.dependencies]
iced = { version = "0.13", path = "." }
iced_core = { version = "0.13", path = "core" }
iced_futures = { version = "0.13", path = "futures" }
iced_graphics = { version = "0.13", path = "graphics" }
iced_highlighter = { version = "0.13", path = "highlighter" }
iced_renderer = { version = "0.13", path = "renderer" }
iced_runtime = { version = "0.13", path = "runtime" }
iced_tiny_skia = { version = "0.13", path = "tiny_skia" }
iced_wgpu = { version = "0.13", path = "wgpu" }
iced_widget = { version = "0.13", path = "widget" }
iced_winit = { version = "0.13", path = "winit" }

async-std = "1.0"
bitflags = "2.0"
bytemuck = { version = "1.0", features = ["derive"] }
bytes = "1.6"
cosmic-text = "0.12"
dark-light = "1.0"
futures = "0.3"
glam = "0.25"
glyphon = { package = "iced_glyphon", version = "0.6" } # Temporary `glyphon` fork
guillotiere = "0.6"
half = "2.2"
image = { version = "0.24", default-features = false }
kamadak-exif = "0.5"
kurbo = "0.10"
log = "0.4"
lyon = "1.0"
lyon_path = "1.0"
num-traits = "0.2"
once_cell = "1.0"
ouroboros = "0.18"
palette = "0.7"
pulldown-cmark = "0.11"
qrcode = { version = "0.13", default-features = false }
raw-window-handle = "0.6"
resvg = "0.42"
rustc-hash = "2.0"
smol = "1.0"
smol_str = "0.2"
softbuffer = "0.4"
syntect = "5.1"
sysinfo = "0.30"
thiserror = "1.0"
tiny-skia = "0.11"
tokio = "1.0"
tracing = "0.1"
unicode-segmentation = "1.0"
url = "2.5"
wasm-bindgen-futures = "0.4"
wasm-timer = "0.2"
web-sys = "0.3.69"
web-time = "1.1"
wgpu = "0.19"
winapi = "0.3"
window_clipboard = "0.4.1"
winit = "0.30"

[workspace.lints.rust]
rust_2018_idioms = { level = "forbid", priority = -1 }
missing_debug_implementations = "deny"
missing_docs = "deny"
unsafe_code = "deny"
unused_results = "deny"

[workspace.lints.clippy]
type-complexity = "allow"
semicolon_if_nothing_returned = "deny"
trivially-copy-pass-by-ref = "deny"
default_trait_access = "deny"
match-wildcard-for-single-variants = "deny"
redundant-closure-for-method-calls = "deny"
filter_map_next = "deny"
manual_let_else = "deny"
unused_async = "deny"
from_over_into = "deny"
needless_borrow = "deny"
new_without_default = "deny"
useless_conversion = "deny"

[workspace.lints.rustdoc]
broken_intra_doc_links = "forbid"
